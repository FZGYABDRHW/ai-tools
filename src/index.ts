import { app, BrowserWindow, protocol, ipcMain } from "electron";
import { autoUpdaterService } from "./services/autoUpdater";
import * as fs from "fs";
import * as path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Disable CORS and security restrictions for development
app.commandLine.appendSwitch("disable-web-security");
app.commandLine.appendSwitch("disable-features", "VizDisplayCompositor");
app.commandLine.appendSwitch("disable-site-isolation-trials");
// Disable sandbox/GPU for containerized environments
app.commandLine.appendSwitch("no-sandbox");
app.commandLine.appendSwitch("disable-gpu-sandbox");
app.commandLine.appendSwitch("no-zygote");
app.disableHardwareAcceleration();

protocol.registerSchemesAsPrivileged([
  {
    scheme: "http",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: false,
      stream: true,
    },
  },
  {
    scheme: "https",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: false,
      stream: true,
    },
  },
  { scheme: "mailto", privileges: { standard: true } },
]);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false, // Disable for security
      contextIsolation: true, // Enable for security
      additionalArguments: [
        `--csp-string=default-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https://*.wowworks.org https://*.wowworks.ru http://localhost:*; script-src 'self' 'unsafe-inline' 'unsafe-eval';`,
      ],
      webSecurity: false, // Disable CORS for development
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Set the main window for auto-updater
  autoUpdaterService.setMainWindow(mainWindow);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // DevTools disabled for production
  // mainWindow.webContents.openDevTools(); // Disabled for production
};

// Settings IPC handlers
function setupSettingsHandlers() {
  const settingsPath = path.join(app.getPath("userData"), "settings.json");

  // Load settings from file
  ipcMain.handle("settings:load", async () => {
    try {
      if (fs.existsSync(settingsPath)) {
        const data = fs.readFileSync(settingsPath, "utf8");
        return JSON.parse(data);
      }
      return null;
    } catch (error) {
      console.error("Failed to load settings:", error);
      return null;
    }
  });

  // Save settings to file
  ipcMain.handle("settings:save", async (_, settings) => {
    try {
      // Ensure the directory exists
      const dir = path.dirname(settingsPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // Write settings to file
      fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2), "utf8");
      return true;
    } catch (error) {
      console.error("Failed to save settings:", error);
      throw error;
    }
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  setupSettingsHandlers();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
