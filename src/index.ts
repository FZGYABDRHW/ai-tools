import { app, BrowserWindow, protocol, ipcMain, dialog } from "electron";
import { autoUpdaterService } from "./services/autoUpdater";
import { fileSystemService } from "./database/fileSystem/FileSystemService";
import { migrationService } from "./database/fileSystem/MigrationService";
import { rendererMigrationService } from "./services/migrationService";
import * as fs from "fs";
import * as path from "path";
import archiver from "archiver";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Disable CORS and security restrictions for development
app.commandLine.appendSwitch("disable-web-security");
app.commandLine.appendSwitch("disable-features", "VizDisplayCompositor");
app.commandLine.appendSwitch("disable-site-isolation-trials");
// Disable sandbox/GPU for containerized environments
app.commandLine.appendSwitch("no-sandbox");
app.commandLine.appendSwitch("disable-gpu-sandbox");
app.commandLine.appendSwitch("no-zygote");
app.disableHardwareAcceleration();

protocol.registerSchemesAsPrivileged([
  {
    scheme: "http",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: false,
      stream: true,
    },
  },
  {
    scheme: "https",
    privileges: {
      standard: true,
      bypassCSP: true,
      allowServiceWorkers: true,
      supportFetchAPI: true,
      corsEnabled: false,
      stream: true,
    },
  },
  { scheme: "mailto", privileges: { standard: true } },
]);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false, // Disable for security
      contextIsolation: true, // Enable for security
      additionalArguments: [
        `--csp-string=default-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https://*.wowworks.org https://*.wowworks.ru http://localhost:*; script-src 'self' 'unsafe-inline' 'unsafe-eval';`,
      ],
      webSecurity: false, // Disable CORS for development
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Set the main window for auto-updater
  autoUpdaterService.setMainWindow(mainWindow);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // DevTools enabled for debugging
  mainWindow.webContents.openDevTools(); // Enabled for debugging
};

// Settings IPC handlers
function setupSettingsHandlers() {
  const settingsPath = path.join(app.getPath("userData"), "settings.json");

  // Load settings from file
  ipcMain.handle("settings:load", async () => {
    try {
      if (fs.existsSync(settingsPath)) {
        const data = fs.readFileSync(settingsPath, "utf8");
        return JSON.parse(data);
      }
      return null;
    } catch (error) {
      console.error("Failed to load settings:", error);
      return null;
    }
  });

  // Save settings to file
  ipcMain.handle("settings:save", async (_, settings) => {
    try {
      // Ensure the directory exists
      const dir = path.dirname(settingsPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // Write settings to file
      fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2), "utf8");
      return true;
    } catch (error) {
      console.error("Failed to save settings:", error);
      throw error;
    }
  });
}

// File System IPC handlers
function setupFileSystemHandlers() {
  let fileSystemInitialized = false;

  async function initializeFileSystem() {
    if (!fileSystemInitialized) {
      await fileSystemService.initialize();
      fileSystemInitialized = true;
    }
  }

  // File System handlers
  ipcMain.handle('filesystem:initialize', async () => {
    await initializeFileSystem();
    return { success: true };
  });

  ipcMain.handle('filesystem:save-report', async (event, report) => {
    await initializeFileSystem();
    return await fileSystemService.saveReport(report);
  });

  ipcMain.handle('filesystem:get-report', async (event, id) => {
    await initializeFileSystem();
    return await fileSystemService.getReport(id);
  });

  ipcMain.handle('filesystem:get-all-reports', async () => {
    await initializeFileSystem();
    return await fileSystemService.getAllReports();
  });

  ipcMain.handle('filesystem:delete-report', async (event, id) => {
    await initializeFileSystem();
    return await fileSystemService.deleteReport(id);
  });

  ipcMain.handle('filesystem:save-report-log', async (event, log) => {
    await initializeFileSystem();
    return await fileSystemService.saveReportLog(log);
  });

  ipcMain.handle('filesystem:get-report-logs', async (event, reportId) => {
    await initializeFileSystem();
    return await fileSystemService.getReportLogs(reportId);
  });

  ipcMain.handle('filesystem:delete-report-log', async (event, id) => {
    await initializeFileSystem();
    return await fileSystemService.deleteReportLog(id);
  });

  ipcMain.handle('filesystem:save-checkpoint', async (event, reportId, checkpoint) => {
    await initializeFileSystem();
    return await fileSystemService.saveCheckpoint(reportId, checkpoint);
  });

  ipcMain.handle('filesystem:get-checkpoint', async (event, reportId) => {
    await initializeFileSystem();
    return await fileSystemService.getCheckpoint(reportId);
  });

  ipcMain.handle('filesystem:delete-checkpoint', async (event, reportId) => {
    await initializeFileSystem();
    return await fileSystemService.deleteCheckpoint(reportId);
  });

  ipcMain.handle('filesystem:save-generation-state', async (event, reportId, state) => {
    await initializeFileSystem();
    return await fileSystemService.saveGenerationState(reportId, state);
  });

  ipcMain.handle('filesystem:get-generation-state', async (event, reportId) => {
    await initializeFileSystem();
    return await fileSystemService.getGenerationState(reportId);
  });

  ipcMain.handle('filesystem:delete-generation-state', async (event, reportId) => {
    await initializeFileSystem();
    return await fileSystemService.deleteGenerationState(reportId);
  });

  ipcMain.handle('filesystem:get-storage-size', async () => {
    await initializeFileSystem();
    return await fileSystemService.getStorageSize();
  });

  ipcMain.handle('filesystem:cleanup-orphaned-data', async () => {
    await initializeFileSystem();
    return await fileSystemService.cleanupOrphanedData();
  });
}

// Migration IPC handlers
function setupMigrationHandlers() {
  let fileSystemInitialized = false;

  async function initializeFileSystem() {
    if (!fileSystemInitialized) {
      await fileSystemService.initialize();
      fileSystemInitialized = true;
    }
  }

  ipcMain.handle('migration:check-localStorage-data', async () => {
    // This should be called from renderer process only
    return false;
  });

  ipcMain.handle('migration:extract-localStorage-data', async () => {
    // This should be called from renderer process only
    return null;
  });

  ipcMain.handle('migration:migrate-from-localStorage', async (event, data) => {
    await initializeFileSystem();
    return await migrationService.migrateFromLocalStorage(data);
  });

  ipcMain.handle('migration:clear-localStorage', async () => {
    // This should be called from renderer process only
    return false;
  });

  ipcMain.handle('migration:has-completed-migration', async () => {
    await initializeFileSystem();
    return await migrationService.hasCompletedMigration();
  });

  ipcMain.handle('migration:get-migration-history', async () => {
    await initializeFileSystem();
    return await migrationService.getMigrationHistory();
  });

  ipcMain.handle('migration:get-last-migration-result', async () => {
    await initializeFileSystem();
    return await migrationService.getLastMigrationResult();
  });

  ipcMain.handle('migration:validate-migration-data', async (event, data) => {
    await initializeFileSystem();
    return await migrationService.validateMigrationData(data);
  });
}

function setupDownloadHandlers() {
  // Download handlers
  ipcMain.handle('download:all-data', async (event, options) => {
    try {
      const mainWindow = BrowserWindow.fromWebContents(event.sender);
      if (!mainWindow) {
        throw new Error('Main window not found');
      }

      // Show save dialog
      const result = await dialog.showSaveDialog(mainWindow, {
        title: 'Download All Data',
        defaultPath: `wowworks-ai-tools-backup-${new Date().toISOString().split('T')[0]}.zip`,
        filters: [
          { name: 'ZIP Files', extensions: ['zip'] },
          { name: 'All Files', extensions: ['*'] }
        ]
      });

      if (result.canceled || !result.filePath) {
        return { success: false, error: 'Download cancelled' };
      }

      const output = fs.createWriteStream(result.filePath);
      const archive = archiver('zip', { zlib: { level: 9 } });

      return new Promise((resolve) => {
        output.on('close', () => {
          const stats = fs.statSync(result.filePath!);
          resolve({
            success: true,
            filePath: result.filePath,
            fileCount: archive.pointer(),
            totalSize: stats.size
          });
        });

        archive.on('error', (err) => {
          console.error('Archive error:', err);
          resolve({ success: false, error: err.message });
        });

        archive.pipe(output);

        // Add data directories based on options
        const userDataPath = app.getPath('userData');
        const dataPath = path.join(userDataPath, 'wowworks-ai-tools');

        if (options.includeReports && fs.existsSync(path.join(dataPath, 'data', 'reports'))) {
          archive.directory(path.join(dataPath, 'data', 'reports'), 'reports');
        }

        if (options.includeLogs && fs.existsSync(path.join(dataPath, 'data', 'logs'))) {
          archive.directory(path.join(dataPath, 'data', 'logs'), 'logs');
        }

        if (options.includeCheckpoints && fs.existsSync(path.join(dataPath, 'data', 'checkpoints'))) {
          archive.directory(path.join(dataPath, 'data', 'checkpoints'), 'checkpoints');
        }

        if (options.includeGenerationStates && fs.existsSync(path.join(dataPath, 'data', 'generationStates'))) {
          archive.directory(path.join(dataPath, 'data', 'generationStates'), 'generationStates');
        }

        if (options.includeBackups && fs.existsSync(path.join(dataPath, 'backups'))) {
          archive.directory(path.join(dataPath, 'backups'), 'backups');
        }

        // Add migration history
        if (fs.existsSync(path.join(dataPath, 'migrations'))) {
          archive.directory(path.join(dataPath, 'migrations'), 'migrations');
        }

        archive.finalize();
      });
    } catch (error) {
      console.error('Download error:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  });

  ipcMain.handle('download:get-stats', async (event, options) => {
    try {
      const userDataPath = app.getPath('userData');
      const dataPath = path.join(userDataPath, 'wowworks-ai-tools');

      let fileCount = 0;
      let totalSize = 0;

      const countFiles = (dirPath: string) => {
        if (!fs.existsSync(dirPath)) return;

        const items = fs.readdirSync(dirPath);
        for (const item of items) {
          const itemPath = path.join(dirPath, item);
          const stats = fs.statSync(itemPath);

          if (stats.isDirectory()) {
            countFiles(itemPath);
          } else {
            fileCount++;
            totalSize += stats.size;
          }
        }
      };

      if (options.includeReports) {
        countFiles(path.join(dataPath, 'data', 'reports'));
      }
      if (options.includeLogs) {
        countFiles(path.join(dataPath, 'data', 'logs'));
      }
      if (options.includeCheckpoints) {
        countFiles(path.join(dataPath, 'data', 'checkpoints'));
      }
      if (options.includeGenerationStates) {
        countFiles(path.join(dataPath, 'data', 'generationStates'));
      }
      if (options.includeBackups) {
        countFiles(path.join(dataPath, 'backups'));
      }
      countFiles(path.join(dataPath, 'migrations'));

      return { fileCount, totalSize };
    } catch (error) {
      console.error('Error getting download stats:', error);
      return { fileCount: 0, totalSize: 0 };
    }
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  setupSettingsHandlers();
  setupFileSystemHandlers();
  setupMigrationHandlers();
  setupDownloadHandlers();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
